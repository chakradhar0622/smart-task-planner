import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Task priority levels
export const taskPriorityEnum = ["low", "medium", "high"] as const;
export type TaskPriority = typeof taskPriorityEnum[number];

// Individual task within a plan
export interface Task {
  id: string;
  name: string;
  description: string;
  duration: string; // e.g., "2 days", "3 hours"
  deadline: string; // ISO date string
  priority: TaskPriority;
  dependencies: string[]; // Array of task IDs this task depends on
  order: number; // Order in the plan
}

// Complete task plan generated by AI
export interface TaskPlan {
  id: string;
  goal: string;
  createdAt: string;
  tasks: Task[];
}

// Input schema for creating a new plan
export const createPlanInputSchema = z.object({
  goal: z.string().min(10, "Goal must be at least 10 characters").max(1000, "Goal must be less than 1000 characters"),
});

export type CreatePlanInput = z.infer<typeof createPlanInputSchema>;

// Task plan response from AI
export interface TaskPlanResponse {
  tasks: Task[];
  summary?: string;
}

// User schema (keeping existing)
export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
